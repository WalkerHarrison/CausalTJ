mutate(datetime = as.Date(datetime))
max_pitches <- pitches.full5 %>%
group_by(pitcher, pitch_type) %>%
summarize(n = n(), speed = mean(start_speed, na.rm = TRUE)) %>%
group_by(pitcher) %>%
mutate(pct_thrown = n/sum(n)) %>%
filter(pct_thrown >= 0.1) %>%
filter(speed == max(speed)) %>%
ungroup() %>%
select(pitcher, pitch_type) %>%
rename(fastest_pitch = pitch_type)
pitches.TJ <- pitches.full5 %>%
filter(!is.na(surgery_date)) %>%
group_by(pitcher) %>%
mutate(a = min(datetime)) %>%
filter(surgery_date > min(datetime)) %>%
mutate(before = datetime < surgery_date) %>%
group_by(pitcher, before) %>%
mutate(final = max(datetime), first = min(datetime)) %>%
group_by(pitcher) %>%
mutate(final = min(final), first = (max(first)))
buff.pre.days <- 90
buff.post.days <- 90
measure.period <- 365
units.TJ <- pitches.TJ %>% group_by(pitcher) %>%
filter( (before == TRUE & datetime >  final - buff.pre.days - measure.period & datetime < final - buff.pre.days ) |
(before == FALSE & datetime > first + buff.post.days & datetime < first + buff.post.days + measure.period)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(age = as.numeric(round((surgery_date - bday)/365))) %>%
group_by(pitcher, age, height, weight, throws, before) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch, na.rm = TRUE),
brk = weighted.mean(brk, w = before, na.rm = TRUE),
pitches = sum(before),
starter = sum(inning.x==1*before)) %>%
group_by(pitcher) %>%
mutate(pitches = max(pitches),
brk = max(brk, na.rm = TRUE),
starter = max(starter) > 0) %>%
ungroup() %>%
mutate(before = factor(ifelse(before == TRUE, "before", "after"), levels = c("before", "after")))  %>%
spread(before, velo) %>%
mutate(TJ = 1)
pitches.NOTJ <- pitches.full5 %>%
filter(is.na(surgery_date)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(year = year(datetime),
age = year(datetime) - year(bday) + 2) %>%
group_by(pitcher, year, age, height, weight, throws) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch),
brk = mean(brk, na.rm = TRUE),
pitches = n(),
starter = sum(inning.x==1)>0) %>%
filter(pitches>100) %>%
mutate(year4 = year + 4)
pitches.NOTJ <- pitches.full5 %>%
filter(is.na(surgery_date)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(year = year(datetime),
age = year(datetime) - year(bday) + 2) %>%
group_by(pitcher, year, age, height, weight, throws) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch),
brk = mean(brk, na.rm = TRUE),
pitches = n(),
starter = sum(inning.x==1)>0) %>%
filter(pitches>100) %>%
mutate(year4 = year + 4)
units.NOTJ <- pitches.NOTJ %>% left_join(pitches.NOTJ, by = c('pitcher', 'height', 'weight', 'throws',
'year4' = 'year')) %>%
ungroup() %>%
select(pitcher, age.x, height, weight, throws, brk.x, pitches.x, starter.x, velo.x, velo.y) %>%
setNames(c('pitcher', 'age', 'height', 'weight', 'throws', 'brk', 'pitches', 'starter', 'before', 'after')) %>%
mutate(TJ = 0)
dat3 <- units.TJ %>% rbind(units.NOTJ) %>%
filter(!is.na(before), !is.nan(before), !is.nan(after)) %>%
filter(!is.na(height))
dat3 <- dat3 %>% mutate(S = !is.na(after))
n <- nrow(dat3)
Z <- dat3$TJ
S <- dat3$S
A <- dat3$brk
X <- as.matrix(dat3[ , c('weight', 'age', 'before')])
S1_Z0 = S == 1 & Z == 0
S0_Z0 = S == 0 & Z == 0
S1_Z1 = S == 1 & Z == 1
S0_Z1 = S == 0 & Z == 1
SZ = cbind(S1_Z0, S0_Z0, S1_Z1, S0_Z1)
Y <- dat3$diff
W <- cbind(rep(1, n), X, A)
d <- ncol(W)
lm.y.z1 <- lm(Y ~ 1 + X + A, subset = Z == 1)
Y
head(dat3)
dat3 <- dat3 %>% mutate(S = !is.na(after),
diff = after - before)
n <- nrow(dat3)
Z <- dat3$TJ
S <- dat3$S
A <- dat3$brk
X <- as.matrix(dat3[ , c('weight', 'age', 'before')])
S1_Z0 = S == 1 & Z == 0
S0_Z0 = S == 0 & Z == 0
S1_Z1 = S == 1 & Z == 1
S0_Z1 = S == 0 & Z == 1
SZ = cbind(S1_Z0, S0_Z0, S1_Z1, S0_Z1)
Y <- dat3$diff
W <- cbind(rep(1, n), X, A)
d <- ncol(W)
lm.y.z1 <- lm(Y ~ 1 + X + A, subset = Z == 1)
alpha_1 <- lm.y.z1$coef
expit <- function(x) exp(x) / (1 + exp(x))
LL <- function(beta, gamma, W, SZ) {
Pbeta = expit(W %*% beta)
Pgamma = expit(W %*% gamma)
LogLike = sum(SZ[, 1] * log(Pbeta) +           SZ[, 2] * log(1 - Pbeta) +
SZ[, 3] * log(Pbeta*Pgamma) +    SZ[, 4] * log(1 - Pbeta * Pgamma))
return(LogLike)
}
LL.gr <- function(beta, gamma, W, SZ) {
Pbeta = ebeta = as.vector(expit(W %*% beta))
Pgamma = egamma = as.vector(expit(W %*% gamma))
LL.beta <- colSums((SZ[, 1]/(Pbeta) -    SZ[, 2]/(1-Pbeta) +
SZ[, 3]/Pbeta -      SZ[, 4]*Pgamma / (1 - Pbeta * Pgamma)) * W)
LL.gamma <- colSums((SZ[, 3]/Pgamma - SZ[, 4]*Pbeta / (1 - Pbeta * Pgamma)) * W)
return (c(LL.beta, LL.gamma))
}
opt3 <- optim(c(rep(0, d), rep(0, d)),
fn = function(BG, W, SZ) LL(BG[1:d], BG[-(1:d)], W, SZ), W = W, SZ = SZ,
gr = function(BG, W, SZ) LL.gr(BG[1:d], BG[-(1:d)], W, SZ),
method = "BFGS", hessian = FALSE, control = list(fnscale = -1, maxit = 1000))
beta <- opt3$par[1:d]; gamma <- opt3$par[-(1:d)]
lm.y.z0 <- lm(Y ~ 1 + X + expit(W %*% gamma), subset = (Z == 0))
alpha_0 <- lm.y.z0$coef
W.LL <- W; W.LL[, 5] <- 1
P.LL <- expit(W %*% beta) * expit(W %*% gamma)
mu.LL.0 <- W.LL %*% alpha_0
mu.LL.0.weighted <- sum(P.LL * mu.LL.0)/sum(P.LL)
mu.LL.1 <- W %*% alpha_1
mu.LL.1.weighted <- sum(P.LL * mu.LL.1)/sum(P.LL)
SACE = mu.LL.1.weighted - mu.LL.0.weighted
dat3$SACE
SACE
buff.pre.days <- 365
buff.post.days <- 365
measure.period <- 365
units.TJ <- pitches.TJ %>% group_by(pitcher) %>%
filter( (before == TRUE & datetime >  final - buff.pre.days - measure.period & datetime < final - buff.pre.days ) |
(before == FALSE & datetime > first + buff.post.days & datetime < first + buff.post.days + measure.period)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(age = as.numeric(round((surgery_date - bday)/365))) %>%
group_by(pitcher, age, height, weight, throws, before) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch, na.rm = TRUE),
brk = weighted.mean(brk, w = before, na.rm = TRUE),
pitches = sum(before),
starter = sum(inning.x==1*before)) %>%
group_by(pitcher) %>%
mutate(pitches = max(pitches),
brk = max(brk, na.rm = TRUE),
starter = max(starter) > 0) %>%
ungroup() %>%
mutate(before = factor(ifelse(before == TRUE, "before", "after"), levels = c("before", "after")))  %>%
spread(before, velo) %>%
mutate(TJ = 1)
pitches.NOTJ <- pitches.full5 %>%
filter(is.na(surgery_date)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(year = year(datetime),
age = year(datetime) - year(bday) + 2) %>%
group_by(pitcher, year, age, height, weight, throws) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch),
brk = mean(brk, na.rm = TRUE),
pitches = n(),
starter = sum(inning.x==1)>0) %>%
filter(pitches>100) %>%
mutate(year4 = year + 4)
units.NOTJ <- pitches.NOTJ %>% left_join(pitches.NOTJ, by = c('pitcher', 'height', 'weight', 'throws',
'year4' = 'year')) %>%
ungroup() %>%
select(pitcher, age.x, height, weight, throws, brk.x, pitches.x, starter.x, velo.x, velo.y) %>%
setNames(c('pitcher', 'age', 'height', 'weight', 'throws', 'brk', 'pitches', 'starter', 'before', 'after')) %>%
mutate(TJ = 0)
dat3 <- units.TJ %>% rbind(units.NOTJ) %>%
filter(!is.na(before), !is.nan(before), !is.nan(after)) %>%
filter(!is.na(height))
dat3 <- dat3 %>% mutate(S = !is.na(after),
diff = after - before)
n <- nrow(dat3)
Z <- dat3$TJ
S <- dat3$S
A <- dat3$brk
X <- as.matrix(dat3[ , c('weight', 'age', 'before')])
S1_Z0 = S == 1 & Z == 0
S0_Z0 = S == 0 & Z == 0
S1_Z1 = S == 1 & Z == 1
S0_Z1 = S == 0 & Z == 1
SZ = cbind(S1_Z0, S0_Z0, S1_Z1, S0_Z1)
Y <- dat3$diff
W <- cbind(rep(1, n), X, A)
d <- ncol(W)
lm.y.z1 <- lm(Y ~ 1 + X + A, subset = Z == 1)
alpha_1 <- lm.y.z1$coef
expit <- function(x) exp(x) / (1 + exp(x))
LL <- function(beta, gamma, W, SZ) {
Pbeta = expit(W %*% beta)
Pgamma = expit(W %*% gamma)
LogLike = sum(SZ[, 1] * log(Pbeta) +           SZ[, 2] * log(1 - Pbeta) +
SZ[, 3] * log(Pbeta*Pgamma) +    SZ[, 4] * log(1 - Pbeta * Pgamma))
return(LogLike)
}
LL.gr <- function(beta, gamma, W, SZ) {
Pbeta = ebeta = as.vector(expit(W %*% beta))
Pgamma = egamma = as.vector(expit(W %*% gamma))
LL.beta <- colSums((SZ[, 1]/(Pbeta) -    SZ[, 2]/(1-Pbeta) +
SZ[, 3]/Pbeta -      SZ[, 4]*Pgamma / (1 - Pbeta * Pgamma)) * W)
LL.gamma <- colSums((SZ[, 3]/Pgamma - SZ[, 4]*Pbeta / (1 - Pbeta * Pgamma)) * W)
return (c(LL.beta, LL.gamma))
}
opt3 <- optim(c(rep(0, d), rep(0, d)),
fn = function(BG, W, SZ) LL(BG[1:d], BG[-(1:d)], W, SZ), W = W, SZ = SZ,
gr = function(BG, W, SZ) LL.gr(BG[1:d], BG[-(1:d)], W, SZ),
method = "BFGS", hessian = FALSE, control = list(fnscale = -1, maxit = 1000))
opt3 <- optim(c(rep(0, d), rep(0, d)),
fn = function(BG, W, SZ) LL(BG[1:d], BG[-(1:d)], W, SZ), W = W, SZ = SZ,
gr = function(BG, W, SZ) LL.gr(BG[1:d], BG[-(1:d)], W, SZ),
method = "BFGS", hessian = FALSE, control = list(fnscale = -1, maxit = 1000))
beta <- opt3$par[1:d]; gamma <- opt3$par[-(1:d)]
lm.y.z0 <- lm(Y ~ 1 + X + expit(W %*% gamma), subset = (Z == 0))
alpha_0 <- lm.y.z0$coef
W.LL <- W; W.LL[, 5] <- 1
P.LL <- expit(W %*% beta) * expit(W %*% gamma)
mu.LL.0 <- W.LL %*% alpha_0
mu.LL.0.weighted <- sum(P.LL * mu.LL.0)/sum(P.LL)
mu.LL.1 <- W %*% alpha_1
mu.LL.1.weighted <- sum(P.LL * mu.LL.1)/sum(P.LL)
SACE = mu.LL.1.weighted - mu.LL.0.weighted
SACE
buff.pre.days  <- 90
buff.post.days <- 90
measure.period <- 365
units.TJ <- pitches.TJ %>% group_by(pitcher) %>%
filter( (before == TRUE & datetime >  final - buff.pre.days - measure.period & datetime < final - buff.pre.days ) |
(before == FALSE & datetime > first + buff.post.days & datetime < first + buff.post.days + measure.period)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(age = as.numeric(round((surgery_date - bday)/365))) %>%
group_by(pitcher, age, height, weight, throws, before) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch, na.rm = TRUE),
brk = weighted.mean(brk, w = before, na.rm = TRUE),
pitches = sum(before),
starter = sum(inning.x==1*before)) %>%
group_by(pitcher) %>%
mutate(pitches = max(pitches),
brk = max(brk, na.rm = TRUE),
starter = max(starter) > 0) %>%
ungroup() %>%
mutate(before = factor(ifelse(before == TRUE, "before", "after"), levels = c("before", "after")))  %>%
spread(before, velo) %>%
mutate(TJ = 1)
##### CONTROL UNITS
pitches.NOTJ <- pitches.full5 %>%
filter(is.na(surgery_date)) %>%
inner_join(max_pitches, by = 'pitcher') %>%
mutate(year = year(datetime),
age = year(datetime) - year(bday) + 2) %>%
group_by(pitcher, year, age, height, weight, throws) %>%
summarize(velo = weighted.mean(start_speed, w = pitch_type == fastest_pitch),
brk = mean(brk, na.rm = TRUE),
pitches = n(),
starter = sum(inning.x==1)>0) %>%
filter(pitches>100) %>%
mutate(year4 = year + 4)
units.NOTJ <- pitches.NOTJ %>% left_join(pitches.NOTJ, by = c('pitcher', 'height', 'weight', 'throws',
'year4' = 'year')) %>%
ungroup() %>%
select(pitcher, age.x, height, weight, throws, brk.x, pitches.x, starter.x, velo.x, velo.y) %>%
setNames(c('pitcher', 'age', 'height', 'weight', 'throws', 'brk', 'pitches', 'starter', 'before', 'after')) %>%
mutate(TJ = 0)
dat3 <- units.TJ %>% rbind(units.NOTJ) %>%
filter(!is.na(before), !is.nan(before), !is.nan(after)) %>%
filter(!is.na(height))
dat3 <- dat3 %>% mutate(S = !is.na(after),
diff = after - before)
n <- nrow(dat3)
Z <- dat3$TJ
S <- dat3$S
A <- dat3$brk
X <- as.matrix(dat3[ , c('weight', 'age', 'before')])
S1_Z0 = S == 1 & Z == 0
S0_Z0 = S == 0 & Z == 0
S1_Z1 = S == 1 & Z == 1
S0_Z1 = S == 0 & Z == 1
SZ = cbind(S1_Z0, S0_Z0, S1_Z1, S0_Z1)
Y <- dat3$diff
W <- cbind(rep(1, n), X, A)
d <- ncol(W)
lm.y.z1 <- lm(Y ~ 1 + X + A, subset = Z == 1)
alpha_1 <- lm.y.z1$coef
expit <- function(x) exp(x) / (1 + exp(x))
LL <- function(beta, gamma, W, SZ) {
Pbeta = expit(W %*% beta)
Pgamma = expit(W %*% gamma)
LogLike = sum(SZ[, 1] * log(Pbeta) +           SZ[, 2] * log(1 - Pbeta) +
SZ[, 3] * log(Pbeta*Pgamma) +    SZ[, 4] * log(1 - Pbeta * Pgamma))
return(LogLike)
}
LL.gr <- function(beta, gamma, W, SZ) {
Pbeta = ebeta = as.vector(expit(W %*% beta))
Pgamma = egamma = as.vector(expit(W %*% gamma))
LL.beta <- colSums((SZ[, 1]/(Pbeta) -    SZ[, 2]/(1-Pbeta) +
SZ[, 3]/Pbeta -      SZ[, 4]*Pgamma / (1 - Pbeta * Pgamma)) * W)
LL.gamma <- colSums((SZ[, 3]/Pgamma - SZ[, 4]*Pbeta / (1 - Pbeta * Pgamma)) * W)
return (c(LL.beta, LL.gamma))
}
opt3 <- optim(c(rep(0, d), rep(0, d)),
fn = function(BG, W, SZ) LL(BG[1:d], BG[-(1:d)], W, SZ), W = W, SZ = SZ,
gr = function(BG, W, SZ) LL.gr(BG[1:d], BG[-(1:d)], W, SZ),
method = "BFGS", hessian = FALSE, control = list(fnscale = -1, maxit = 1000))
beta <- opt3$par[1:d]; gamma <- opt3$par[-(1:d)]
lm.y.z0 <- lm(Y ~ 1 + X + expit(W %*% gamma), subset = (Z == 0))
alpha_0 <- lm.y.z0$coef
W.LL <- W; W.LL[, 5] <- 1
P.LL <- expit(W %*% beta) * expit(W %*% gamma)
mu.LL.0 <- W.LL %*% alpha_0
mu.LL.0.weighted <- sum(P.LL * mu.LL.0)/sum(P.LL)
mu.LL.1 <- W %*% alpha_1
mu.LL.1.weighted <- sum(P.LL * mu.LL.1)/sum(P.LL)
SACE = mu.LL.1.weighted - mu.LL.0.weighted
SACE
bootstrap_SACE <- function(){
dat3 <- units.TJ %>% rbind(units.NOTJ) %>%
filter(!is.na(before), !is.nan(before), !is.nan(after)) %>%
filter(!is.na(height)) %>%
mutate(diff = after - before) %>%
select(-after, - pitcher) %>%
mutate(S = !is.na(diff)) %>%
group_by(TJ, S) %>% sample_n(100, replace = TRUE) %>% ungroup()
glm.fit <- glm(TJ ~ ., data = dat3 %>% select(-diff, -brk), family = binomial)
dat3 <- dat3 %>% mutate(w = predict(glm.fit, type = "response"))
#View(dat)
###### step 1
pi.LL <- dat3 %>% filter(TJ == 0) %>% summarize(pi = weighted.mean(S == 1, w = w)) %>% pull(pi)
pi.DD <- dat3 %>% filter(TJ == 1) %>% summarize(pi = weighted.mean(S == 0, w = w)) %>% pull(pi)
pi.LD <- 1 - pi.LL - pi.DD
mu0.LL <- Y.0L <- dat3 %>% filter(TJ == 0, S == 1) %>% summarize(Y = weighted.mean(diff, w = w)) %>% pull(Y)
##### step 2
PA.LL <- dat3 %>% filter(TJ == 0, S == 1) %>%
mutate(w = w/sum(w)) %>%
summarize(p = list(approxfun(density(brk, weights = w)))) %>% pull(p) %>% .[[1]]
PA.DD <- dat3 %>% filter(TJ == 1, S == 0) %>%
mutate(w = w/sum(w)) %>%
summarize(p = list(approxfun(density(brk, weights = w)))) %>% pull(p) %>% .[[1]]
#PA.LL <- dat %>% filter(TJ == 0, S == 1) %>% pull(brk) %>% density() %>% approxfun()
#PA.DD <- dat %>% filter(TJ == 1, S == 0) %>% pull(brk) %>% density() %>% approxfun()
PA <- dat3 %>% mutate(w = w/sum(w)) %>% summarize(p = list(approxfun(density(brk, weights = w)))) %>% pull(p) %>% .[[1]]
PA.LD <- function(a){(PA(a) - pi.LL*PA.LL(a) - pi.DD*PA.DD(a))/pi.LD}
#### step 3
B.a <- function(a){pi.LL*PA.LL(a)/(pi.LL*PA.LL(a) + pi.LD*PA.LD(a))}
### step 4
mu.a <- function(a){
smooth <- dat3 %>% filter(TJ == 1, S == 1) %>% mutate(w = w/sum(w)) %>% loess(diff ~ brk, data = ., weights = w)
return(predict(smooth, newdata = a))
}
### step 5
Ak <- seq(quantile(dat3$brk, 0.25), quantile(dat3$brk, 0.75), length.out = 10)
mu.Ak <- mu.a(Ak)
B.Ak <- B.a(Ak)
B.Ak.inv <- 1 - B.Ak
mu1.LL <- lm(mu.Ak ~ B.Ak +  B.Ak.inv - 1)$coefficients[1]
### step 6
return(mu1.LL - mu0.LL)
}
a <- sapply(1:1000, function(x) bootstrap_SACE())
mean(a); quantile(a, .025); quantile(a, 0.975)
SACE.lwr = quantile(a, .025)
SACE.upr = quantile(a, 0.975)
SACE
SACE.lwr
SACE.upr
SACE.lwr
SACE.upr
SACE.lwr
round(SACE.lwr, )
round(SACE.lwr, 4)
nrow(dat)
datP
nrow(datP)
dat=datP
dat %>% group_by(TJ) %>% count()
df = dat
# each unit gets two rows, one for pre- and post-treatment
dfDID = df %>% gather(key = "period", value = "velo", c("before", "after"))
# fit outcome model
m.before = lm(velo ~ TJ + age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "before")
m.after = lm(velo ~ TJ + age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "after")
summary(m.before)
summary(m.after)
# fit outcome model
m.before = lm(velo ~ age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "before" & TJ == 0)
m.after = lm(velo ~ age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "after" & TJ == 0)
# fit propensity score model
lm.ps = glm(TJ ~ . - after, data = df, family = "binomial")
df = df %>% mutate(ps = predict(lm.ps, type = "response"))
# regression estimator
df = df %>% mutate(
predBefore = df %>% mutate(TJ = 0) %>%
select(-c(after, ps)) %>%
rename(velo = before) %>%
mutate(period = "before") %>%
select(names(dfDID)) %>%
predict(m.before, type = "response", newdata = .),
predAfter = df %>% mutate(TJ = 0) %>%
select(-c(before, ps)) %>%
rename(velo = after) %>%
mutate(period = "after") %>%
select(names(dfDID)) %>%
predict(m.after, type = "response", newdata = .),
w = ifelse(TJ == 1, 1, ps / (1 - ps)))
t1 = df %>% summarize(sum(TJ * after) / sum(TJ)) %>% pull()
t0reg = df %>%
summarize(
sum(TJ * before) / sum(TJ) + sum(TJ * (predAfter - predBefore)) / sum(TJ)) %>%
pull()
t0ipw = df %>% summarize(
sum(TJ * before * w) / sum(TJ) + sum((1 - TJ) * (after - before) * w) / sum(TJ)) %>%
pull()
t0dr_reg = df %>%
summarize(
sum((TJ - ps) * (predAfter - predBefore) / (1 - ps)) / sum(TJ)) %>%
pull()
t0dr_ipw = df %>%
summarize(
sum((1 - TJ) * (after - before + predBefore - predAfter) * w) / sum(TJ)) %>%
pull()
t0dr = t0ipw + t0dr_reg
regATT = t1 - t0reg
ipwATT = t1 - t0ipw
drATT  = t1 - t0dr
regATT
ipwATT
drATT
head(dat)
dat = dat %>% select(-c(pitcher, height))
df = dat
# each unit gets two rows, one for pre- and post-treatment
dfDID = df %>% gather(key = "period", value = "velo", c("before", "after"))
# fit outcome model
m.before = lm(velo ~ age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "before" & TJ == 0)
m.after = lm(velo ~ age + weight +
throws + fastest_pitch + starter + pitches, data = dfDID,
subset = period == "after" & TJ == 0)
# fit propensity score model
lm.ps = glm(TJ ~ . - after, data = df, family = "binomial")
df = df %>% mutate(ps = predict(lm.ps, type = "response"))
# regression estimator
df = df %>% mutate(
predBefore = df %>% mutate(TJ = 0) %>%
select(-c(after, ps)) %>%
rename(velo = before) %>%
mutate(period = "before") %>%
select(names(dfDID)) %>%
predict(m.before, type = "response", newdata = .),
predAfter = df %>% mutate(TJ = 0) %>%
select(-c(before, ps)) %>%
rename(velo = after) %>%
mutate(period = "after") %>%
select(names(dfDID)) %>%
predict(m.after, type = "response", newdata = .),
w = ifelse(TJ == 1, 1, ps / (1 - ps)))
t1 = df %>% summarize(sum(TJ * after) / sum(TJ)) %>% pull()
t0reg = df %>%
summarize(
sum(TJ * before) / sum(TJ) + sum(TJ * (predAfter - predBefore)) / sum(TJ)) %>%
pull()
t0ipw = df %>% summarize(
sum(TJ * before * w) / sum(TJ) + sum((1 - TJ) * (after - before) * w) / sum(TJ)) %>%
pull()
t0dr_reg = df %>%
summarize(
sum((TJ - ps) * (predAfter - predBefore) / (1 - ps)) / sum(TJ)) %>%
pull()
t0dr_ipw = df %>%
summarize(
sum((1 - TJ) * (after - before + predBefore - predAfter) * w) / sum(TJ)) %>%
pull()
t0dr = t0ipw + t0dr_reg
regATT = t1 - t0reg
ipwATT = t1 - t0ipw
drATT  = t1 - t0dr
regATT
ipwATT
drATT
# fit outcome models
m.before = lm(velo ~ age + weight + throws + fastest_pitch +
starter + pitches, data = dfDID,
subset = period == "before" & TJ == 0)
m.after = lm(velo ~ age + weight + throws + fastest_pitch +
starter + pitches, data = dfDID,
subset = period == "after" & TJ == 0)
nrow(dat)
predict(m.before, type="response", newdata = dat[1,])
View(dat)
predict(m.after, type="response", newdata = dat[1,])-predict(m.before, type="response", newdata = dat[1,])
predict(m.after, type="response", newdata = mutate(dat[1,], TJ == 0))-predict(m.before, type="response", newdata = mutate(dat[1,], TJ == 0))
dat[1,]
